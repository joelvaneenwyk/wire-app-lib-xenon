/*
 * This file was generated by the Gradle 'init' task.
 */

import com.google.protobuf.gradle.id
import org.gradle.kotlin.dsl.`java-library`

group = "com.wire"
version = "1.5.5"
description = "Xenon"

plugins {
    `java-library`
    id("maven-publish")
    id("com.google.protobuf") version("0.9.4")
}

repositories {
    gradlePluginPortal()
    mavenCentral()
    mavenLocal()
    google()
}

dependencies {
    api(libs.nebula.lint)
    api(libs.cryptobox4j)

    runtimeOnly(libs.flyway.gradle.plugin)

    implementation(libs.cryptobox4j)
    implementation(libs.jackson.annotations)
    implementation(libs.jackson.databind)

    implementation(libs.javax.validation)
    implementation(libs.protobuf.java)
    implementation(libs.jdbi3.sqlobject)

    testImplementation(libs.junit)
    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.junit.jupiter.engine)

    testImplementation(libs.postgresql)
    testImplementation(libs.flyway.core)
    testImplementation(libs.slf4j.simple)
    testImplementation(libs.junit)

    testImplementation(libs.junit)
    testRuntimeOnly(libs.junit.platform.launcher)
    testRuntimeOnly(libs.flyway.gradle.plugin)
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

protobuf {
    plugins {
        id("grpc") {
            artifact = libs.grpc.genJava.get().toString()
        }
    }

    protoc {
        artifact = libs.protobuf.protoc.get().toString()
    }

    generateProtoTasks {
        ofSourceSet("test").forEach {
            it.plugins {
                // Apply the "grpc" plugin whose spec is defined above, without
                // options.  Note the braces cannot be omitted, otherwise the
                // plugin will not be added. This is because of the implicit way
                // NamedDomainObjectContainer binds the methods.
                id("grpc") {}
            }
        }
    }
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll(listOf(
        "-Xlint:-options",
        "-Xlint:deprecation",
        "-Xmaxerrs", "1000",
        "-Xmaxwarns", "1000"))
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava8Compatible) {
        (options as StandardJavadocDocletOptions).addStringOption("Xdoclint:none", "-quiet")
    }
}

tasks.named<Test>("test") {
    useJUnitPlatform()

    maxParallelForks = 1

    testLogging {
        showStandardStreams = true
        showExceptions = true

        events("passed")
    }
}
